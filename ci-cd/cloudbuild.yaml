# this file create the complete ci-cd flow until de deploy in cloud-run

steps:

# $PROJECT_ID  : the project ID of the build.
# $BUILD_ID    : the autogenerated ID of the build.
# $REPO_NAME   : the source repository name specified by RepoSource.
# $BRANCH_NAME : the branch name specified by RepoSource.
# $TAG_NAME    : the tag name specified by RepoSource.
# $REVISION_ID
# $COMMIT_SHA  : the commit SHA specified by RepoSource or resolved from the specified branch or tag.
# $SHORT_SHA   : first 7 characters of $REVISION_ID or $COMMIT_SHA.

# _ARTIFACT_HOST_  host (<zone>.docker.pkg.dev) que contém os repositórios
# _ARTIFACT_REPO_  repositório específico dentro do host
# _BUCKET_         bucket que contem a pasta do whitelabel
# _FOLDER_         pasta que tem arquivos do whitelabel
# _IMAGE_NAME_     nome da imagem gravada no Artifacty Registry

# Install node modules
- name: 'gcr.io/cloud-builders/npm:node-18.12.0'
  entrypoint: 'npm'
  args: ["install"]
  # dir: 'src'
  id: install
  waitFor: ['-']  # The '-' indicates that this step begins immediately.

# Remove vulnerabilidades e pacotes não utilizados
- name: 'gcr.io/cloud-builders/npm:node-18.12.0'
  entrypoint: 'npm'
  args: ['audit', 'fix']
  id: audit
  waitFor: ['install']

# Checa e corrige a formatação estática do código
- name: 'gcr.io/cloud-builders/npm:node-18.12.0'
  entrypoint: 'npm'
  args: ['run', 'lint']
  id: lint
  waitFor: ['audit']

# Test code against those modules
- name: 'gcr.io/cloud-builders/npm:node-18.12.0'
  args: ['run', 'test']
  entrypoint: 'npm'
  env:
  - NODE_ENV=test"
  id: tests
  waitFor: ['lint']

# Transpila scripts para producao
- name: 'gcr.io/cloud-builders/npm:node-18.12.0'
  entrypoint: 'npm'
  args: ['run', 'build']
  id: build
  waitFor: ['tests']

# Build app image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build'
    # , '-q'
    , '-t' , "$_ARTIFACT_HOST_/$PROJECT_ID/$_ARTIFACT_REPO_/$_IMAGE_NAME_:$SHORT_SHA"
    , '.'
    , '--build-arg', "BUILD_ID=$BUILD_ID"
    , '--build-arg', "SHORT_SHA=$SHORT_SHA"
    ]
  id: 'build-image'
  waitFor: ['build']

# Push app image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'push', "$_ARTIFACT_HOST_/$PROJECT_ID/$_ARTIFACT_REPO_/$_IMAGE_NAME_:$SHORT_SHA"]
  id: 'push-image'
  waitFor: ['build-image']

 # check deployed version with : gcloud run services describe <_SERVICE_NAME_> --region {_REGION_}
- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  id: "deploy service"
  entrypoint: "gcloud"
  args:
    [
      "run",
      "deploy",
      "--platform", "managed",
      "${_SERVICE_NAME_}",
      "--region", "${_REGION_}",
      "--service-account", "$_SERVICE_ACCOUNT_",
      "--allow-unauthenticated",
      "--labels", "module=exports",
      "--image", "$_ARTIFACT_HOST_/$PROJECT_ID/$_ARTIFACT_REPO_/$_IMAGE_NAME_:$SHORT_SHA",
      "--concurrency", "20",
      "--min-instances", "0",
      "--max-instances", "10",
      "--timeout", "3600s",
      "--cpu", "1",
      "--memory", "128Mi",
      "--set-env-vars", "NODE_ENV=$_NODE_ENV_",
      "--revision-suffix","sha-$SHORT_SHA",
      "--port", "$_SERVER_PORT_",
      "--command", "node",
      "--args", "dist/src/main.js",
      "--async"
    ]
  waitFor: ['-']

# Force the new revision to serve 100% of traffic.
- id: "ensure service live"
  name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  entrypoint: "gcloud"
  args:
    [
      "run",
      "services",
      "update-traffic",
      "${_SERVICE_NAME_}",
      "--to-latest",
      "--platform",
      "managed",
      "--region",
      "${_REGION_}",
    ]
  waitFor: ["deploy service"]

images:
- $_ARTIFACT_HOST_/$PROJECT_ID/$_ARTIFACT_REPO_/$_IMAGE_NAME_:$SHORT_SHA